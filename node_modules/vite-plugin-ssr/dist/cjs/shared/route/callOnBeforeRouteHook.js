"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callOnBeforeRouteHook = void 0;
const assertPageContextProvidedByUser_1 = require("../assertPageContextProvidedByUser");
const utils_1 = require("./utils");
const resolveRouteFunction_1 = require("./resolveRouteFunction");
async function callOnBeforeRouteHook(onBeforeRouteHook, pageContext) {
    const hookReturn = await onBeforeRouteHook.onBeforeRoute(pageContext);
    const errPrefix = `The onBeforeRoute() hook defined by ${onBeforeRouteHook.hookFilePath}`;
    (0, utils_1.assertUsage)(hookReturn === null ||
        hookReturn === undefined ||
        ((0, utils_1.isObjectWithKeys)(hookReturn, ['pageContext']) && (0, utils_1.hasProp)(hookReturn, 'pageContext')), `${errPrefix} should return \`null\`, \`undefined\`, or a plain JavaScript object \`{ pageContext: { /* ... */ } }\`.`);
    if (hookReturn === null || hookReturn === undefined) {
        return null;
    }
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(hookReturn, 'pageContext', 'object'), `${errPrefix} returned \`{ pageContext }\` but pageContext should be a plain JavaScript object.`);
    if ((0, utils_1.hasProp)(hookReturn.pageContext, '_pageId') && !(0, utils_1.hasProp)(hookReturn.pageContext, '_pageId', 'null')) {
        const errPrefix2 = `${errPrefix} returned \`{ pageContext: { _pageId } }\` but _pageId should be`;
        (0, utils_1.assertUsage)((0, utils_1.hasProp)(hookReturn.pageContext, '_pageId', 'string'), `${errPrefix2} a string or null`);
        (0, utils_1.assertUsage)(pageContext._allPageIds.includes(hookReturn.pageContext._pageId), `${errPrefix2} one of following values: \`[${pageContext._allPageIds.map((s) => `'${s}'`).join(', ')}]\`.`);
    }
    if ((0, utils_1.hasProp)(hookReturn.pageContext, 'routeParams')) {
        (0, resolveRouteFunction_1.assertRouteParams)(hookReturn.pageContext, `${errPrefix} returned \`{ pageContext: { routeParams } }\` but routeParams should`);
    }
    const pageContextAddendumHook = {};
    if ((0, utils_1.hasProp)(hookReturn.pageContext, 'url')) {
        (0, utils_1.assertWarning)(false, `${errPrefix} returned \`{ pageContext: { url } }\` but \`pageContext.url\` has been renamed to \`pageContext.urlOriginal\`. Return \`{ pageContext: { urlOriginal } }\` instead. (See https://vite-plugin-ssr.com/migration/0.4.23 for more information.)`, { showStackTrace: false, onlyOnce: true });
        hookReturn.pageContext.urlOriginal = hookReturn.pageContext.url;
        delete hookReturn.pageContext.url;
    }
    if ((0, utils_1.hasProp)(hookReturn.pageContext, 'urlOriginal')) {
        (0, utils_1.assertUsageUrl)(hookReturn.pageContext.urlOriginal, `${errPrefix} returned \`{ pageContext: { urlOriginal } }\` but urlOriginal`);
        (0, utils_1.objectAssign)(pageContextAddendumHook, { _urlPristine: pageContext.urlOriginal });
    }
    (0, assertPageContextProvidedByUser_1.assertPageContextProvidedByUser)(hookReturn.pageContext, {
        hook: { hookFilePath: onBeforeRouteHook.hookFilePath, hookName: 'onBeforeRoute' }
    });
    (0, utils_1.objectAssign)(pageContextAddendumHook, hookReturn.pageContext);
    return pageContextAddendumHook;
}
exports.callOnBeforeRouteHook = callOnBeforeRouteHook;
