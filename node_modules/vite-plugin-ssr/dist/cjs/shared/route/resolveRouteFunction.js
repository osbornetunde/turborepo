"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertRouteParams = exports.resolveRouteFunction = void 0;
const addComputedUrlProps_1 = require("../addComputedUrlProps");
const utils_1 = require("./utils");
async function resolveRouteFunction(routeFunction, allowAsync, pageContext, routeDefinedAt) {
    (0, addComputedUrlProps_1.assertURLs)(pageContext);
    let result = routeFunction(pageContext);
    (0, utils_1.assertUsage)(!(0, utils_1.isPromise)(result) || allowAsync, `The Route Function ${routeDefinedAt} returned a promise; async route functions are opt-in, see https://vite-plugin-ssr.com/route-function#async`);
    result = await result;
    if (result === false) {
        return null;
    }
    if (result === true) {
        result = {};
    }
    (0, utils_1.assertUsage)((0, utils_1.isPlainObject)(result), `The Route Function ${routeDefinedAt} should return a boolean or a plain JavaScript object, instead it returns \`${(0, utils_1.hasProp)(result, 'constructor') ? result.constructor : result}\`.`);
    if ('match' in result) {
        const { match } = result;
        (0, utils_1.assertUsage)(typeof match === 'boolean', `The \`match\` value returned by the Route Function ${routeDefinedAt} should be a boolean.`);
        if (!match) {
            return null;
        }
    }
    let precedence = null;
    if ('precedence' in result) {
        precedence = result.precedence;
        (0, utils_1.assertUsage)(typeof precedence === 'number', `The \`precedence\` value returned by the Route Function ${routeDefinedAt} should be a number.`);
    }
    assertRouteParams(result, `The \`routeParams\` object returned by the Route Function ${routeDefinedAt} should`);
    const routeParams = result.routeParams || {};
    (0, utils_1.assertUsage)(!('pageContext' in result), 'Providing `pageContext` in Route Functions is prohibited, see https://vite-plugin-ssr.com/route-function#cannot-provide-pagecontext');
    (0, utils_1.assert)((0, utils_1.isPlainObject)(routeParams));
    Object.keys(result).forEach((key) => {
        (0, utils_1.assertUsage)(key === 'match' || key === 'routeParams' || key === 'precedence', `The Route Function ${routeDefinedAt} returned an object with an unknown key \`{ ${key} }\`. Allowed keys: ['match', 'routeParams', 'precedence'].`);
    });
    return {
        precedence,
        routeParams
    };
}
exports.resolveRouteFunction = resolveRouteFunction;
function assertRouteParams(result, errPrefix) {
    (0, utils_1.assert)(errPrefix.endsWith(' should'));
    if (!(0, utils_1.hasProp)(result, 'routeParams')) {
        return;
    }
    (0, utils_1.assert)(errPrefix.endsWith(' should'));
    (0, utils_1.assertUsage)((0, utils_1.isPlainObject)(result.routeParams), `${errPrefix} be a plain JavaScript object.`);
    (0, utils_1.assertUsage)((0, utils_1.isStringRecord)(result.routeParams), `${errPrefix} only hold string values.`);
}
exports.assertRouteParams = assertRouteParams;
