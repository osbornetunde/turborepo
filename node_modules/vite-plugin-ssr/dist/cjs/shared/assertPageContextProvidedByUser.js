"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertPageContextProvidedByUser = void 0;
const utils_1 = require("./utils");
function assertPageContextProvidedByUser(pageContextProvidedByUser, { hook, errorMessagePrefix, isRenderErrorPage }) {
    const errPrefix = (() => {
        if (errorMessagePrefix) {
            return errorMessagePrefix;
        }
        else {
            (0, utils_1.assert)(hook);
            const { hookName, hookFilePath } = hook;
            (0, utils_1.assert)(!hookName.endsWith(')'));
            return `The \`pageContext\` object provided by the ${hookName}() hook defined by ${hookFilePath}`;
        }
    })();
    (0, utils_1.assertUsage)((0, utils_1.isObject)(pageContextProvidedByUser), `${errPrefix} should be an object instead of \`${typeof pageContextProvidedByUser}\``);
    (0, utils_1.assertUsage)(!('_objectCreatedByVitePluginSsr' in pageContextProvidedByUser), `${errPrefix} shouldn't be the whole \`pageContext\` object, see https://vite-plugin-ssr.com/pageContext-manipulation#do-not-return-entire-pagecontext`);
    // In principle, it's possible to use `onBeforeRoute()` to override and define the whole routing.
    // Is that a good idea to allow users to do this? Beyond deep integration with Vue Router or React Router, is there a use case for this?
    (0, utils_1.assertWarning)(!('_pageId' in pageContextProvidedByUser), `${errPrefix} sets \`pageContext._pageId\` which means that vite-plugin-ssr's routing is overriden. This is an experimental feature: make sure to contact a vite-plugin-ssr maintainer before using this.`, { showStackTrace: false, onlyOnce: true });
    if (!isRenderErrorPage) {
        (0, utils_1.assertUsage)(!('is404' in pageContextProvidedByUser), `${errPrefix} sets \`pageContext.is404\` which is forbidden, use \`throw RenderErrorPage()\` instead, see https://vite-plugin-ssr.com/RenderErrorPage`);
    }
}
exports.assertPageContextProvidedByUser = assertPageContextProvidedByUser;
