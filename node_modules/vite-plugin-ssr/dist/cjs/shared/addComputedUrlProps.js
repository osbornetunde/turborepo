"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertURLs = exports.addComputedUrlProps = void 0;
const utils_1 = require("./utils");
function addComputedUrlProps(pageContext, enumerable = true) {
    (0, utils_1.assert)(pageContext.urlOriginal);
    if ('urlPathname' in pageContext) {
        (0, utils_1.assert)((0, utils_1.hasPropertyGetter)(pageContext, 'urlPathname'));
    }
    Object.defineProperty(pageContext, 'urlPathname', {
        get: urlPathnameGetter,
        enumerable,
        configurable: true
    });
    // TODO/v1-release: move pageContext.urlParsed to pageContext.url
    if ('url' in pageContext)
        (0, utils_1.assert)((0, utils_1.hasPropertyGetter)(pageContext, 'url'));
    Object.defineProperty(pageContext, 'url', {
        get: urlGetter,
        enumerable: false,
        configurable: true
    });
    if ('urlParsed' in pageContext) {
        (0, utils_1.assert)((0, utils_1.hasPropertyGetter)(pageContext, 'urlParsed'));
    }
    Object.defineProperty(pageContext, 'urlParsed', {
        get: urlParsedGetter,
        enumerable,
        configurable: true
    });
}
exports.addComputedUrlProps = addComputedUrlProps;
function getUrlParsed(pageContext) {
    let urlHandler = pageContext._urlHandler;
    if (!urlHandler) {
        urlHandler = (urlOriginal) => urlOriginal;
    }
    const url = urlHandler(pageContext.urlOriginal);
    const baseServer = pageContext._baseServer;
    (0, utils_1.assert)(baseServer.startsWith('/'));
    return (0, utils_1.parseUrl)(url, baseServer);
}
function urlPathnameGetter() {
    const { pathname } = getUrlParsed(this);
    const urlPathname = pathname;
    (0, utils_1.assert)(urlPathname.startsWith('/'));
    return urlPathname;
}
function urlGetter() {
    (0, utils_1.assertWarning)(false, '`pageContext.url` is outdated. Use `pageContext.urlPathname`, `pageContext.urlParsed`, or `pageContext.urlOriginal` instead. (See https://vite-plugin-ssr.com/migration/0.4.23 for more information.)', { onlyOnce: true, showStackTrace: true });
    return urlPathnameGetter.call(this);
}
function urlParsedGetter() {
    const urlParsedOriginal = getUrlParsed(this);
    const { origin, pathname, pathnameOriginal, search, searchAll, searchOriginal, hash, hashOriginal } = urlParsedOriginal;
    const urlParsed = {
        origin,
        pathname,
        pathnameOriginal,
        search,
        searchAll,
        searchOriginal,
        hash,
        hashOriginal,
        get hashString() {
            (0, utils_1.assertWarning)(false, '`pageContext.urlParsed.hashString` has been renamed to `pageContext.urlParsed.hashOriginal`', { onlyOnce: true, showStackTrace: true });
            return hashOriginal;
        },
        get searchString() {
            (0, utils_1.assertWarning)(false, '`pageContext.urlParsed.searchString` has been renamed to `pageContext.urlParsed.searchOriginal`', { onlyOnce: true, showStackTrace: true });
            return searchOriginal;
        }
    };
    makeNonEnumerable(urlParsed, 'hashString');
    makeNonEnumerable(urlParsed, 'searchString');
    return urlParsed;
}
function makeNonEnumerable(obj, prop) {
    const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    Object.defineProperty(obj, prop, { ...descriptor, enumerable: false });
}
function assertURLs(pageContext) {
    (0, utils_1.assert)(typeof pageContext.urlOriginal === 'string');
    (0, utils_1.assert)(typeof pageContext.urlPathname === 'string');
    (0, utils_1.assert)((0, utils_1.isPlainObject)(pageContext.urlParsed));
    (0, utils_1.assert)(pageContext.urlPathname === pageContext.urlParsed.pathname);
}
exports.assertURLs = assertURLs;
