"use strict";
// Counterpart: ../../node/plugin/plugins/importUserCode/v1-design/serializePageConfigs.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePageConfigs = void 0;
const parse_1 = require("@brillout/json-serializer/parse");
const utils_1 = require("../utils");
function parsePageConfigs(pageConfigs) {
    pageConfigs.forEach((pageConfig) => {
        Object.entries(pageConfig.configElements).forEach(([configName, configElement]) => {
            parseConfigValue(configElement);
            if (configName === 'route') {
                assertRouteConfigValue(configElement);
            }
        });
    });
}
exports.parsePageConfigs = parsePageConfigs;
function parseConfigValue(configElement) {
    const { configValueSerialized } = configElement;
    if (configValueSerialized !== undefined) {
        configElement.configValue = (0, parse_1.parse)(configValueSerialized);
    }
}
function assertRouteConfigValue(configElement) {
    (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'configValue')); // route files are eagerly loaded
    const { configValue } = configElement;
    const configValueType = typeof configValue;
    (0, utils_1.assertUsage)(configValueType === 'string' || (0, utils_1.isCallable)(configValue), `${configElement.configDefinedAt} has an invalid type '${configValueType}': it should be a string or a function instead, see https://vite-plugin-ssr.com/route`);
    /* We don't do that to avoid unnecessarily bloating the client-side bundle when using Server Routing
     *  - When using Server Routing, this file is loaded as well
     *  - When using Server Routing, client-side validation is superfluous as Route Strings only need to be validated on the server-side
    if (typeof configValue === 'string') {
      assertRouteString(configValue, `${configElement.configDefinedAt} defines an`)
    }
    */
}
