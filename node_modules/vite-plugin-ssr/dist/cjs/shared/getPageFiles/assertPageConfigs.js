"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertPageConfigGlobal = exports.assertPageConfigs = void 0;
const utils_1 = require("../utils");
function assertPageConfigs(pageConfigs) {
    (0, utils_1.assert)(Array.isArray(pageConfigs) || pageConfigs === null);
    // TODO: remove obsolete comment?
    // if `plusConfigFilesCannotBeLoaded === null` => then `import.meta.glob('/**/+config.${scriptFileExtensions}', { eager: true })` cannot be transpiled/loaded => code of virtual file cannot be generated or run => assertPageConfigs() is never called
    (0, utils_1.assert)(pageConfigs !== null);
    pageConfigs.forEach((pageConfig) => {
        (0, utils_1.assert)((0, utils_1.isObject)(pageConfig));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'pageId', 'string'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'routeFilesystem', 'string') || (0, utils_1.hasProp)(pageConfig, 'routeFilesystem', 'null'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'routeFilesystemDefinedBy', 'string') ||
            (0, utils_1.hasProp)(pageConfig, 'routeFilesystemDefinedBy', 'null'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'loadCodeFiles', 'function'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'isErrorPage', 'boolean'));
        (0, utils_1.assert)((0, utils_1.hasProp)(pageConfig, 'configElements', 'object'));
        assertConfigElements(pageConfig.configElements, false);
    });
}
exports.assertPageConfigs = assertPageConfigs;
function assertPageConfigGlobal(pageConfigGlobal) {
    assertConfigElements(pageConfigGlobal, true);
}
exports.assertPageConfigGlobal = assertPageConfigGlobal;
function assertConfigElements(configElements, isGlobalConfig) {
    (0, utils_1.assert)((0, utils_1.isObject)(configElements));
    Object.entries(configElements).forEach(([configName, configElement]) => {
        (0, utils_1.assert)((0, utils_1.isObject)(configElement) || configElement === null);
        if (configElement === null) {
            (0, utils_1.assert)(isGlobalConfig);
            return;
        }
        (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'configDefinedAt', 'string'));
        (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'plusConfigFilePath', 'string') || (0, utils_1.hasProp)(configElement, 'plusConfigFilePath', 'null'));
        (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'configEnv', 'string'));
        (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'codeFilePath', 'string') || (0, utils_1.hasProp)(configElement, 'codeFilePath', 'null'));
        (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'codeFileExport', 'string') || (0, utils_1.hasProp)(configElement, 'codeFileExport', 'null'));
        (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'configValueSerialized', 'string') ||
            (0, utils_1.hasProp)(configElement, 'configValueSerialized', 'undefined'));
        if (isGlobalConfig ||
            // Route files are eagerly loaded (both code files and config value files)
            configName === 'route') {
            (0, utils_1.assert)((0, utils_1.hasProp)(configElement, 'configValue') || (0, utils_1.hasProp)(configElement, 'configValueSerialized'));
        }
    });
}
