"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.commonConfig = void 0;
const utils_1 = require("../utils");
const buildConfig_1 = require("./buildConfig");
function commonConfig() {
    return [
        {
            name: 'vite-plugin-ssr:commonConfig-1',
            config: () => ({
                appType: 'custom',
                ssr: {
                    external: ['vite-plugin-ssr', 'vite-plugin-ssr/server']
                }
            }),
            configResolved(config) {
                (0, utils_1.addRequireShim_setUserRootDir)(config.root);
            }
        },
        {
            name: 'vite-plugin-ssr:commonConfig-2',
            enforce: 'post',
            configResolved: {
                order: 'post',
                handler(config) {
                    setDefaultPort(config);
                    workaroundCI(config);
                    (0, buildConfig_1.assertRollupInput)(config);
                    assertResolveAlias(config);
                }
            }
        }
    ];
}
exports.commonConfig = commonConfig;
function setDefaultPort(config) {
    var _a, _b;
    // @ts-ignore
    config.server ?? (config.server = {});
    (_a = config.server).port ?? (_a.port = 3000);
    // @ts-ignore
    config.preview ?? (config.preview = {});
    (_b = config.preview).port ?? (_b.port = 3000);
}
// Workaround GitHub Action failing to access the server
function workaroundCI(config) {
    var _a, _b;
    if (process.env.CI) {
        (_a = config.server).host ?? (_a.host = true);
        (_b = config.preview).host ?? (_b.host = true);
    }
}
function assertResolveAlias(config) {
    const aliases = getAliases(config);
    const errPrefix = config.configFile || 'Your Vite configuration';
    const errSuffix = "follow the '#' prefix convention, see https://vite-plugin-ssr.com/path-aliases#vite";
    aliases.forEach((alias) => {
        const { customResolver, find } = alias;
        (0, utils_1.assertWarning)(customResolver === undefined, `${errPrefix} defines resolve.alias with customResolver() which we recommend against, use a string instead and ${errSuffix}`);
        if (typeof find !== 'string') {
            (0, utils_1.assert)(find instanceof RegExp);
            // Skip aliases set by Vite:
            //   /^\/?@vite\/env/
            //   /^\/?@vite\/client/
            if (find.toString().includes('@vite'))
                return;
            // Skip alias /^solid-refresh$/ set by vite-plugin-solid
            if (find.toString().includes('solid-refresh'))
                return;
            (0, utils_1.assertWarning)(false, `${errPrefix} defines resolve.alias with a RegExp ${find} which we recommend against, use a string instead and ${errSuffix}`);
        }
        else {
            // Skip aliases set by @preact/preset-vite
            if (find.startsWith('react'))
                return;
            (0, utils_1.assertWarning)(find.startsWith('#'), `${errPrefix} defines an alias '${find}' that doesn't ${errSuffix}`);
        }
    });
}
function getAliases(config) {
    const { alias } = config.resolve;
    if (!Array.isArray(alias)) {
        return [alias];
    }
    else {
        return alias;
    }
}
