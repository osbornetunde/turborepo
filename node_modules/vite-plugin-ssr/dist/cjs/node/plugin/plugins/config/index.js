"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveVpsConfig = void 0;
const assertVpsConfig_1 = require("./assertVpsConfig");
const utils_1 = require("../../utils");
const findConfigVpsFromStemPackages_1 = require("./findConfigVpsFromStemPackages");
const pickFirst_1 = require("./pickFirst");
const resolveExtensions_1 = require("./resolveExtensions");
const resolveBase_1 = require("./resolveBase");
const getConfigData_1 = require("../importUserCode/v1-design/getConfigData");
function resolveVpsConfig(vpsConfig) {
    return {
        name: 'vite-plugin-ssr:resolveVpsConfig',
        enforce: 'pre',
        async configResolved(config) {
            const promise = resolveConfig(vpsConfig, config);
            config.configVpsPromise = promise;
            await promise;
        }
    };
}
exports.resolveVpsConfig = resolveVpsConfig;
async function resolveConfig(vpsConfig, config) {
    const fromPluginOptions = (vpsConfig ?? {});
    const fromViteConfig = (config.vitePluginSsr ?? {});
    const fromStemPackages = await (0, findConfigVpsFromStemPackages_1.findConfigVpsFromStemPackages)(config.root);
    const configs = [fromPluginOptions, ...fromStemPackages, fromViteConfig];
    const extensions = (0, resolveExtensions_1.resolveExtensions)(configs, config);
    const { vikeConfig: fromPlusConfigFile } = await (0, getConfigData_1.getConfigData)(config.root, (0, utils_1.isDev2)(config), extensions);
    configs.push(fromPlusConfigFile);
    (0, assertVpsConfig_1.assertVpsConfig)(fromPlusConfigFile, ({ prop, errMsg }) => {
        // TODO: add config file path ?
        return `config '${prop}' ${errMsg}`;
    });
    (0, assertVpsConfig_1.assertVpsConfig)(fromViteConfig, ({ prop, errMsg }) => `vite.config.js#vitePluginSsr.${prop} ${errMsg}`);
    // TODO/v1-release: deprecate this
    (0, assertVpsConfig_1.assertVpsConfig)(fromPluginOptions, ({ prop, errMsg }) => `vite.config.js > vite-plugin-ssr option ${prop} ${errMsg}`);
    const { baseServer, baseAssets } = (0, resolveBase_1.resolveBase)(configs, config);
    const configVps = {
        disableAutoFullBuild: (0, pickFirst_1.pickFirst)(configs.map((c) => c.disableAutoFullBuild)) ?? false,
        extensions,
        prerender: resolvePrerenderOptions(configs),
        includeAssetsImportedByServer: (0, pickFirst_1.pickFirst)(configs.map((c) => c.includeAssetsImportedByServer)) ?? false,
        baseServer,
        baseAssets
    };
    return configVps;
}
function resolvePrerenderOptions(configs) {
    if (!configs.some((c) => c.prerender)) {
        return false;
    }
    const configsPrerender = configs.map((c) => c.prerender).filter(isObject);
    return {
        partial: (0, pickFirst_1.pickFirst)(configsPrerender.map((c) => c.partial)) ?? false,
        noExtraDir: (0, pickFirst_1.pickFirst)(configsPrerender.map((c) => c.noExtraDir)) ?? false,
        parallel: (0, pickFirst_1.pickFirst)(configsPrerender.map((c) => c.parallel)) ?? true,
        disableAutoRun: (0, pickFirst_1.pickFirst)(configsPrerender.map((c) => c.disableAutoRun)) ?? false
    };
}
function isObject(p) {
    return typeof p === 'object';
}
