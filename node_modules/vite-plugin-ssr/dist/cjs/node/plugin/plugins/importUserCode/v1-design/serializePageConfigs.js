"use strict";
// Counterpart: ../../../../../shared/getPageFiles/parsePageConfigs.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializePageConfigs = void 0;
const utils_1 = require("../../../utils");
const generateEagerImport_1 = require("../generateEagerImport");
const virtualFileImportPageCode_1 = require("../../../../shared/virtual-files/virtualFileImportPageCode");
const debug_1 = require("./debug");
const stringify_1 = require("@brillout/json-serializer/stringify");
function serializePageConfigs(pageConfigsData, pageConfigGlobal, isForClientSide, isDev, id) {
    const lines = [];
    const importStatements = [];
    lines.push('export const pageConfigs = [');
    pageConfigsData.forEach((pageConfig) => {
        const { pageId, routeFilesystem, routeFilesystemDefinedBy, configElements, isErrorPage } = pageConfig;
        const virtualFileIdImportPageCode = (0, virtualFileImportPageCode_1.getVirtualFileIdImportPageCode)(pageId, isForClientSide);
        lines.push(`  {`);
        lines.push(`    pageId: ${JSON.stringify(pageId)},`);
        lines.push(`    isErrorPage: ${JSON.stringify(isErrorPage)},`);
        lines.push(`    routeFilesystem: ${JSON.stringify(routeFilesystem)},`);
        lines.push(`    routeFilesystemDefinedBy: ${JSON.stringify(routeFilesystemDefinedBy)},`);
        lines.push(`    loadCodeFiles: async () => (await import(${JSON.stringify(virtualFileIdImportPageCode)})).default,`);
        lines.push(`    configElements: {`);
        Object.entries(configElements).forEach(([configName, configElement]) => {
            if (configElement.configEnv === 'config-only')
                return;
            const whitespace = '      ';
            lines.push(serializeConfigElement(configElement, configName, importStatements, whitespace, false));
        });
        lines.push(`    }`);
        lines.push(`  },`);
    });
    lines.push('];');
    lines.push('export const pageConfigGlobal = {');
    (0, utils_1.objectEntries)(pageConfigGlobal).forEach(([configName, configElement]) => {
        if (configName === 'onBeforeRoute') {
            // if( isForClientSide && !isClientRouting ) return
        }
        else if (configName === 'onPrerenderStart') {
            if (isDev || isForClientSide)
                return;
        }
        else {
            (0, utils_1.assert)(false);
        }
        const whitespace = '  ';
        lines.push(serializeConfigElement(configElement, configName, importStatements, whitespace, true));
    });
    lines.push('};');
    const code = [...importStatements, ...lines].join('\n');
    (0, debug_1.debug)(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
exports.serializePageConfigs = serializePageConfigs;
function serializeConfigElement(configElement, configName, importStatements, whitespace, eagerImport) {
    if (configElement === null)
        return `${whitespace}['${configName}']: null,`;
    (0, utils_1.assert)(configElement.configEnv !== 'config-only');
    const lines = [];
    lines.push(`${whitespace}['${configName}']: {`);
    const { configDefinedAt, configDefinedByFile, configEnv, codeFilePath, codeFileExport, plusConfigFilePath } = configElement;
    lines.push(`${whitespace}  configDefinedAt: ${JSON.stringify(configDefinedAt)},`);
    lines.push(`${whitespace}  configDefinedByFile: ${JSON.stringify(configDefinedByFile)},`);
    lines.push(`${whitespace}  codeFilePath: ${JSON.stringify(codeFilePath)},`);
    lines.push(`${whitespace}  codeFileExport: ${JSON.stringify(codeFileExport)},`);
    lines.push(`${whitespace}  plusConfigFilePath: ${JSON.stringify(plusConfigFilePath)},`);
    lines.push(`${whitespace}  configEnv: '${configEnv}',`);
    if ('configValue' in configElement) {
        (0, utils_1.assert)(!eagerImport);
        const { configValue } = configElement;
        let configValueSerialized;
        try {
            configValueSerialized = (0, stringify_1.stringify)(configValue);
        }
        catch {
            (0, utils_1.assertUsage)(false, `The code of config '${configName}' cannot live inside ${configDefinedByFile}, see https://vite-plugin-ssr.com/header-file`);
        }
        lines.push(`${whitespace}  configValueSerialized: ${JSON.stringify(configValueSerialized)}`);
    }
    else {
        (0, utils_1.assert)(codeFilePath);
        if (configEnv === '_routing-env' || eagerImport) {
            const { importVar, importStatement } = (0, generateEagerImport_1.generateEagerImport)(codeFilePath);
            // TODO: expose all exports so that assertDefaultExport can be applied
            lines.push(`${whitespace}  configValue: ${importVar}[${JSON.stringify(codeFileExport)}]`);
            importStatements.push(importStatement);
        }
    }
    lines.push(`${whitespace}},`);
    return lines.join('\n');
}
