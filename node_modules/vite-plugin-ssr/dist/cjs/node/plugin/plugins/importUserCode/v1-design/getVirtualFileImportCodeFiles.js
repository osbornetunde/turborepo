"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVirtualFileImportCodeFiles = void 0;
const utils_1 = require("../../../utils");
const generateEagerImport_1 = require("../generateEagerImport");
const virtualFileImportPageCode_1 = require("../../../../shared/virtual-files/virtualFileImportPageCode");
const getConfigData_1 = require("./getConfigData");
const extractAssetsQuery_1 = require("../../../../shared/extractAssetsQuery");
const debug_1 = require("./debug");
const path_1 = __importDefault(require("path"));
async function getVirtualFileImportCodeFiles(id, userRootDir, isDev, configVps) {
    const result = (0, virtualFileImportPageCode_1.isVirtualFileIdImportPageCode)(id);
    (0, utils_1.assert)(result);
    /* This assertion fails when using includeAssetsImportedByServer
    {
      const isForClientSide = !config.build.ssr
      assert(result.isForClientSide === isForClientSide)
    }
    */
    const { pageId, isForClientSide } = result;
    const { pageConfigsData } = await (0, getConfigData_1.getConfigData)(userRootDir, isDev, configVps.extensions);
    (0, utils_1.assert)(pageConfigsData);
    const pageConfigData = pageConfigsData.find((pageConfigData) => pageConfigData.pageId === pageId);
    (0, utils_1.assert)(pageConfigData);
    const code = generateSourceCodeOfLoadCodeFileVirtualFile(pageConfigData, isForClientSide, pageId, configVps.includeAssetsImportedByServer, isDev);
    (0, debug_1.debug)(id, isForClientSide ? 'CLIENT-SIDE' : 'SERVER-SIDE', code);
    return code;
}
exports.getVirtualFileImportCodeFiles = getVirtualFileImportCodeFiles;
function generateSourceCodeOfLoadCodeFileVirtualFile(pageConfigData, isForClientSide, pageId, includeAssetsImportedByServer, isDev) {
    const lines = [];
    const importStatements = [];
    lines.push('export default [');
    let varCounter = 0;
    Object.entries(pageConfigData.configElements).forEach(([configName, configElement]) => {
        if (!configElement.codeFilePath)
            return;
        const { configEnv, codeFilePath, codeFileExport } = configElement;
        if (configEnv === '_routing-env' || configEnv === 'config-only')
            return;
        if (configEnv === (isForClientSide ? 'server-only' : 'client-only'))
            return;
        (0, utils_1.assertPosixPath)(codeFilePath);
        const fileName = path_1.default.posix.basename(codeFilePath);
        const isPlusFile = fileName.startsWith('+');
        const { importVar, importStatement } = (0, generateEagerImport_1.generateEagerImport)(codeFilePath, varCounter++, isPlusFile ? undefined : codeFileExport);
        importStatements.push(importStatement);
        lines.push(`  {`);
        lines.push(`    configName: '${configName}',`);
        lines.push(`    codeFilePath: '${codeFilePath}',`);
        lines.push(`    isPlusFile: ${JSON.stringify(isPlusFile)},`);
        if (isPlusFile) {
            lines.push(`    codeFileExports: ${importVar},`);
        }
        else {
            lines.push(`    codeFileExportValue: ${importVar}`);
        }
        lines.push(`  },`);
    });
    lines.push('];');
    if (includeAssetsImportedByServer && isForClientSide && !isDev) {
        lines.push(`import '${(0, extractAssetsQuery_1.extractAssetsAddQuery)((0, virtualFileImportPageCode_1.getVirtualFileIdImportPageCode)(pageId, false))}'`);
    }
    const code = [...importStatements, ...lines].join('\n');
    return code;
}
