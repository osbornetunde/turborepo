"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importUserCode = void 0;
const getConfigVps_1 = require("../../../shared/getConfigVps");
const getVirtualFileImportCodeFiles_1 = require("./v1-design/getVirtualFileImportCodeFiles");
const getVirtualFileImportUserCode_1 = require("./getVirtualFileImportUserCode");
const utils_1 = require("../../utils");
const virtualFileImportPageCode_1 = require("../../../shared/virtual-files/virtualFileImportPageCode");
const virtualFileImportUserCode_1 = require("../../../shared/virtual-files/virtualFileImportUserCode");
const getConfigData_1 = require("./v1-design/getConfigData");
function importUserCode() {
    let config;
    let configVps;
    return {
        name: 'vite-plugin-ssr:importUserCode',
        config() {
            return {
                experimental: {
                    // TODO/v1-release: remove
                    importGlobRestoreExtension: true
                }
            };
        },
        async configResolved(config_) {
            configVps = await (0, getConfigVps_1.getConfigVps)(config_);
            config = config_;
        },
        resolveId(id) {
            if ((0, utils_1.isVirtualFileId)(id)) {
                return (0, utils_1.resolveVirtualFileId)(id);
            }
        },
        handleHotUpdate(ctx) {
            const { file, server } = ctx;
            (0, utils_1.assertPosixPath)(file);
            getConfigData_1.getConfigData_dependenciesInvisibleToVite.forEach((f) => (0, utils_1.assertPosixPath)(f));
            if (!getConfigData_1.getConfigData_dependenciesInvisibleToVite.has(file)) {
                return;
            }
            (0, getConfigData_1.getConfigData_invalidate)();
            const mods = Array.from(server.moduleGraph.urlToModuleMap.keys())
                .filter((url) => (0, virtualFileImportPageCode_1.isVirtualFileIdImportPageCode)(url) || (0, virtualFileImportUserCode_1.isVirtualFileIdImportUserCode)(url))
                .map((url) => {
                const mod = server.moduleGraph.urlToModuleMap.get(url);
                (0, utils_1.assert)(mod);
                return mod;
            });
            return mods;
        },
        async load(id, options) {
            const isDev = (0, utils_1.isDev1)();
            if (!(0, utils_1.isVirtualFileId)(id))
                return undefined;
            id = (0, utils_1.getVirtualFileId)(id);
            if ((0, virtualFileImportPageCode_1.isVirtualFileIdImportPageCode)(id)) {
                const code = await (0, getVirtualFileImportCodeFiles_1.getVirtualFileImportCodeFiles)(id, config.root, isDev, configVps);
                return code;
            }
            if ((0, virtualFileImportUserCode_1.isVirtualFileIdImportUserCode)(id)) {
                const code = await (0, getVirtualFileImportUserCode_1.getVirtualFileImportUserCode)(id, options, configVps, config, isDev);
                return code;
            }
        },
        configureServer() {
            (0, utils_1.isDev1_onConfigureServer)();
        }
    };
}
exports.importUserCode = importUserCode;
