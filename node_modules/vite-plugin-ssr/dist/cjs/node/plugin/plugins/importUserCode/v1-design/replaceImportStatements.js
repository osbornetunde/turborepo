"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isImportData = exports.parseImportData = exports.replaceImportStatements = void 0;
// Playground: https://github.com/brillout/acorn-playground
const acorn_1 = require("acorn");
const utils_1 = require("../../../utils");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
function replaceImportStatements(code, filePathToShowToUser) {
    const spliceOperations = [];
    const fileImports = [];
    const imports = getImports(code);
    if (imports.length === 0)
        return { noImportStatement: true };
    imports.forEach((node) => {
        if (node.type !== 'ImportDeclaration')
            return;
        const importPath = node.source.value;
        (0, utils_1.assert)(typeof importPath === 'string');
        const { start, end } = node;
        const importStatementCode = code.slice(start, end);
        // No variable imported
        if (node.specifiers.length === 0) {
            const isWarning = !utils_1.styleFileRE.test(importPath);
            let quote = indent(importStatementCode);
            if (isWarning) {
                quote = picocolors_1.default.cyan(quote);
            }
            else {
                quote = picocolors_1.default.bold(picocolors_1.default.red(quote));
            }
            const errMsg = [
                `As explained in https://vite-plugin-ssr.com/header-file the following import in ${filePathToShowToUser} has no effect:`,
                quote
            ].join('\n');
            if (!isWarning) {
                (0, utils_1.assertUsage)(false, errMsg);
            }
            (0, utils_1.assertWarning)(false, errMsg, { onlyOnce: true, showStackTrace: false });
        }
        let replacement = '';
        node.specifiers.forEach((specifier) => {
            (0, utils_1.assert)(specifier.type === 'ImportSpecifier' || specifier.type === 'ImportDefaultSpecifier');
            const importLocalName = specifier.local.name;
            const importExportName = (() => {
                if (specifier.type === 'ImportDefaultSpecifier')
                    return 'default';
                {
                    const imported = specifier.imported;
                    if (imported)
                        return imported.name;
                }
                return importLocalName;
            })();
            const importDataString = serializeImportData({ importPath, importExportName, importWasGenerated: true });
            replacement += `const ${importLocalName} = '${importDataString}';`;
            fileImports.push({
                importStatementCode,
                importDataString,
                importLocalName
            });
        });
        spliceOperations.push({
            start,
            end,
            replacement
        });
    });
    const codeMod = spliceMany(code, spliceOperations);
    return { code: codeMod, fileImports, noImportStatement: false };
}
exports.replaceImportStatements = replaceImportStatements;
function getImports(code) {
    const { body } = (0, acorn_1.parse)(code, {
        ecmaVersion: 'latest',
        sourceType: 'module'
        // https://github.com/acornjs/acorn/issues/1136
    });
    const imports = [];
    body.forEach((node) => {
        if (node.type === 'ImportDeclaration')
            imports.push(node);
    });
    return imports;
}
const import_ = 'import';
const SEP = ':';
const zeroWidthSpace = '\u200b';
function serializeImportData({ importPath, importExportName, importWasGenerated }) {
    const tag = importWasGenerated ? zeroWidthSpace : '';
    // `import:${importPath}:${importPath}`
    return `${tag}${import_}${SEP}${importPath}${SEP}${importExportName}`;
}
function isImportData(str) {
    return str.startsWith(import_ + SEP) || str.startsWith(zeroWidthSpace + import_ + SEP);
}
exports.isImportData = isImportData;
function parseImportData(importDataString) {
    if (!isImportData(importDataString)) {
        return null;
    }
    let importWasGenerated = false;
    if (importDataString.startsWith(zeroWidthSpace)) {
        importWasGenerated = true;
        (0, utils_1.assert)(zeroWidthSpace.length === 1);
        importDataString = importDataString.slice(1);
    }
    const parts = importDataString.split(SEP).slice(1);
    if (!importWasGenerated && parts.length === 1) {
        const importExportName = 'default';
        const importPath = parts[0];
        return { importPath, importExportName, importWasGenerated, importDataString };
    }
    (0, utils_1.assert)(parts.length >= 2);
    const importExportName = parts[parts.length - 1];
    const importPath = parts.slice(0, -1).join(SEP);
    return { importPath, importExportName, importWasGenerated, importDataString };
}
exports.parseImportData = parseImportData;
function spliceMany(str, operations) {
    let strMod = '';
    let endPrev;
    operations.forEach(({ start, end, replacement }) => {
        if (endPrev !== undefined) {
            (0, utils_1.assert)(endPrev < start);
        }
        else {
            endPrev = 0;
        }
        strMod += str.slice(endPrev, start) + replacement;
        endPrev = end;
    });
    strMod += str.slice(endPrev, str.length - 1);
    return strMod;
}
function indent(str) {
    return str
        .split('\n')
        .map((s) => `  ${s}`)
        .join('\n');
}
