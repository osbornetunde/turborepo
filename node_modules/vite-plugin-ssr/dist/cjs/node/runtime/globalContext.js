"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRuntimeManifest = exports.setGlobalContextViteConfig = exports.setGlobalContextViteDevServer = exports.getGlobalContext = exports.initGlobalContext = void 0;
const utils_1 = require("./utils");
const loadImportBuild_1 = require("./globalContext/loadImportBuild");
const getPageFiles_1 = require("../../shared/getPageFiles");
const assertPluginManifest_1 = require("../shared/assertPluginManifest");
const getConfigVps_1 = require("../shared/getConfigVps");
const assertRuntimeManifest_1 = require("../shared/assertRuntimeManifest");
const globalObject = (0, utils_1.getGlobalObject)('globalContext.ts', {});
function getGlobalContext() {
    (0, utils_1.assert)(globalObject.globalContext);
    return globalObject.globalContext;
}
exports.getGlobalContext = getGlobalContext;
function setGlobalContextViteDevServer(viteDevServer) {
    if (globalObject.viteDevServer)
        return;
    (0, utils_1.assert)(!globalObject.globalContext);
    globalObject.viteDevServer = viteDevServer;
}
exports.setGlobalContextViteDevServer = setGlobalContextViteDevServer;
function setGlobalContextViteConfig(config) {
    if (globalObject.config)
        return;
    (0, utils_1.assert)(!globalObject.globalContext);
    globalObject.config = config;
}
exports.setGlobalContextViteConfig = setGlobalContextViteConfig;
async function initGlobalContext({ isPrerendering } = {}) {
    if (globalObject.globalContext)
        return;
    const { viteDevServer, config } = globalObject;
    assertNodeEnv(!!viteDevServer);
    const isProduction = !viteDevServer;
    if (isProduction) {
        const buildEntries = await (0, loadImportBuild_1.loadImportBuild)();
        assertBuildEntries(buildEntries, isPrerendering ?? false);
        const { pageFiles, clientManifest, pluginManifest } = buildEntries;
        (0, getPageFiles_1.setPageFiles)(pageFiles);
        assertViteManifest(clientManifest);
        (0, assertPluginManifest_1.assertPluginManifest)(pluginManifest);
        globalObject.globalContext = {
            isProduction,
            isPrerendering: isPrerendering ?? false,
            clientManifest,
            pluginManifest,
            viteDevServer: null,
            config: null,
            configVps: null,
            baseServer: pluginManifest.baseServer,
            baseAssets: pluginManifest.baseAssets,
            includeAssetsImportedByServer: pluginManifest.includeAssetsImportedByServer
        };
    }
    else {
        (0, utils_1.assert)(config);
        (0, utils_1.assert)(!isPrerendering);
        const configVps = await (0, getConfigVps_1.getConfigVps)(config);
        const pluginManifest = getRuntimeManifest(configVps);
        globalObject.globalContext = {
            isProduction,
            isPrerendering: false,
            clientManifest: null,
            pluginManifest: null,
            viteDevServer,
            config,
            configVps,
            baseServer: pluginManifest.baseServer,
            baseAssets: pluginManifest.baseAssets,
            includeAssetsImportedByServer: pluginManifest.includeAssetsImportedByServer
        };
    }
}
exports.initGlobalContext = initGlobalContext;
function getRuntimeManifest(configVps) {
    const { includeAssetsImportedByServer, baseServer, baseAssets } = configVps;
    const manifest = {
        baseServer,
        baseAssets,
        includeAssetsImportedByServer
    };
    (0, assertRuntimeManifest_1.assertRuntimeManifest)(manifest);
    return manifest;
}
exports.getRuntimeManifest = getRuntimeManifest;
function assertBuildEntries(buildEntries, isPreRendering) {
    const errMsg = [
        `You are tyring to run`,
        isPreRendering ? 'pre-rendering' : 'the server for production',
        "but your app isn't built yet. Run `$ vite build` before ",
        isPreRendering ? 'pre-rendering.' : 'running the server.'
    ].join(' ');
    (0, utils_1.assertUsage)(buildEntries, errMsg);
}
function assertViteManifest(manifest) {
    (0, utils_1.assert)((0, utils_1.isPlainObject)(manifest));
    /* We should include these assertions but we don't as a workaround for PWA manifests: https://github.com/brillout/vite-plugin-ssr/issues/769
       Instead, we should rename the vite manifest e.g. with https://vitejs.dev/config/build-options.html#build-manifest
    Object.entries(manifest)
      // circumvent esbuild bug: esbuild adds a `default` key to JSON upon `require('./some.json')`.
      .filter(([key]) => key !== 'default')
      .forEach(([_, entry]) => {
        assert(isPlainObject(entry))
        assert(typeof entry.file === 'string')
      })
    */
}
function assertNodeEnv(hasViteDevServer) {
    const nodeEnv = (0, utils_1.getNodeEnv)();
    if (nodeEnv === null || nodeEnv === 'test')
        return;
    const isDevNodeEnv = [undefined, '', 'dev', 'development'].includes(nodeEnv);
    // calling Vite's createServer() is enough for hasViteDevServer to be true, even without actually adding Vite's development middleware to the server: https://github.com/brillout/vite-plugin-ssr/issues/792#issuecomment-1516830759
    (0, utils_1.assertWarning)(hasViteDevServer === isDevNodeEnv, `Vite's development server was${hasViteDevServer ? '' : "n't"} instantiated while the environment is set to be a ${isDevNodeEnv ? 'development' : 'production'} environment by \`process.env.NODE_ENV === ${JSON.stringify(nodeEnv)}\` which is contradictory, see https://vite-plugin-ssr.com/renderPage#node-env`, { showStackTrace: false, onlyOnce: true });
}
