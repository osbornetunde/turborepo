"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getPageFiles_1 = require("../../../shared/getPageFiles");
const utils_1 = require("../utils");
const globalContext_1 = require("../globalContext");
const virtualFileImportUserCode_1 = require("../../shared/virtual-files/virtualFileImportUserCode");
const logTranspileError_1 = require("../shared/logTranspileError");
(0, getPageFiles_1.setPageFilesAsync)(getPageFilesExports);
async function getPageFilesExports() {
    const globalContext = (0, globalContext_1.getGlobalContext)();
    (0, utils_1.assert)(!globalContext.isProduction);
    const { viteDevServer } = globalContext;
    (0, utils_1.assert)(viteDevServer);
    const result = await transpileAndLoadModule(virtualFileImportUserCode_1.virtualFileIdImportUserCodeServer, viteDevServer);
    if ('transpileError' in result) {
        const { transpileError } = result;
        (0, utils_1.debugGlob)(`Glob error: ${virtualFileImportUserCode_1.virtualFileIdImportUserCodeServer} transpile error: `, transpileError.message);
        throw transpileError;
    }
    else {
        (0, utils_1.debugGlob)('Glob result: ', result.moduleExports);
    }
    return result.moduleExports;
}
async function transpileAndLoadModule(moduleId, viteDevServer) {
    // Avoid redudant error logging, e.g. get rid of this:
    // ```
    // Transform failed with 1 error:
    // /home/rom/code/vite-plugin-ssr/examples/v1/pages/+config.ts:5:1: ERROR: Unexpected "}"
    // ```
    // VPS already handles `transpileError`, no need for Vite to log `err.message`
    const onErrorOriginal = viteDevServer.config.logger.error;
    viteDevServer.config.logger.error = () => { };
    let result;
    try {
        result = await viteDevServer.ssrLoadModule(moduleId);
    }
    catch (err) {
        if ((0, logTranspileError_1.isTranspileError)(err)) {
            return { transpileError: err };
        }
        throw err;
    }
    finally {
        viteDevServer.config.logger.error = onErrorOriginal;
    }
    const moduleExports = result.default || result;
    (0, utils_1.assert)((0, utils_1.isObject)(moduleExports));
    return { moduleExports };
}
