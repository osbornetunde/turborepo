"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeOnRenderHtmlHook = void 0;
const renderHtml_1 = require("../html/renderHtml");
const getHook_1 = require("../../../shared/getHook");
const utils_1 = require("../utils");
const stream_1 = require("../html/stream");
const assertPageContextProvidedByUser_1 = require("../../../shared/assertPageContextProvidedByUser");
const logError_1 = require("./logError");
const preparePageContextForRelease_1 = require("./preparePageContextForRelease");
const assertObjectKeys_1 = require("../../../shared/assertObjectKeys");
async function executeOnRenderHtmlHook(pageContext) {
    const hookFound = getRenderHook(pageContext);
    const { renderHook, hookFn } = hookFound;
    (0, utils_1.objectAssign)(pageContext, { _renderHook: renderHook });
    (0, preparePageContextForRelease_1.preparePageContextForRelease)(pageContext);
    const hookReturnValue = await (0, utils_1.callHookWithTimeout)(() => hookFn(pageContext), renderHook.hookName, renderHook.hookFilePath);
    const { documentHtml, pageContextProvidedByRenderHook, pageContextPromise, injectFilter } = processHookReturnValue(hookReturnValue, renderHook);
    Object.assign(pageContext, pageContextProvidedByRenderHook);
    (0, utils_1.objectAssign)(pageContext, { _pageContextPromise: pageContextPromise });
    if (documentHtml === null || documentHtml === undefined) {
        return { htmlRender: null, renderHook };
    }
    const onErrorWhileStreaming = (err) => {
        (0, logError_1.logErrorWithVite)(err);
        /*
        objectAssign(pageContext, {
          errorWhileRendering: err,
          _serverSideErrorWhileStreaming: true
        })
        */
    };
    const htmlRender = await (0, renderHtml_1.renderDocumentHtml)(documentHtml, pageContext, onErrorWhileStreaming, injectFilter);
    (0, utils_1.assert)(typeof htmlRender === 'string' || (0, stream_1.isStream)(htmlRender));
    return { htmlRender, renderHook };
}
exports.executeOnRenderHtmlHook = executeOnRenderHtmlHook;
function getRenderHook(pageContext) {
    let hookFound;
    {
        let hook;
        let hookName = undefined;
        hook = (0, getHook_1.getHook)(pageContext, 'onRenderHtml');
        if (hook) {
            hookName = 'onRenderHtml';
        }
        else {
            hook = (0, getHook_1.getHook)(pageContext, 'render');
            if (hook) {
                hookName = 'render';
            }
        }
        if (hook) {
            (0, utils_1.assert)(hookName);
            const { hookFilePath, hookFn } = hook;
            hookFound = {
                hookFn,
                renderHook: { hookFilePath, hookName }
            };
        }
    }
    if (!hookFound) {
        const hookName = pageContext._pageConfigs.length > 0 ? 'onRenderHtml' : 'render';
        (0, utils_1.assertUsage)(false, [
            `No ${hookName}() hook found`
            /*
          'See https://vite-plugin-ssr.com/render-modes for more information.',
          [
            // 'Loaded config files (none of them define the onRenderHtml() hook):',
            'Loaded server-side page files (none of them `export { render }`):',
            ...pageContext._pageFilePathsLoaded.map((f, i) => ` (${i + 1}): ${f}`)
          ].join('\n')
          */
        ].join(' '));
    }
    return hookFound;
}
function processHookReturnValue(hookReturnValue, renderHook) {
    let documentHtml = null;
    let pageContextPromise = null;
    let pageContextProvidedByRenderHook = null;
    let injectFilter = null;
    const ret = () => ({ documentHtml, pageContextProvidedByRenderHook, pageContextPromise, injectFilter });
    if (hookReturnValue === null)
        return ret();
    if ((0, renderHtml_1.isDocumentHtml)(hookReturnValue)) {
        documentHtml = hookReturnValue;
        return ret();
    }
    const errPrefix = `The ${renderHook.hookName}() hook defined at ${renderHook.hookFilePath}`;
    const errSuffix = 'a string generated with the escapeInject`<html>...</html>` template tag or a string returned by dangerouslySkipEscape(), see https://vite-plugin-ssr.com/escapeInject';
    (0, utils_1.assertUsage)(typeof hookReturnValue !== 'string', [errPrefix, 'returned a plain JavaScript string which is forbidden: it should instead return', errSuffix].join(' '));
    (0, utils_1.assertUsage)((0, utils_1.isObject)(hookReturnValue), [
        errPrefix,
        'should return `null`, a value `documentHtml`, or an object `{ documentHtml, pageContext }` where `pageContext` is `undefined` or an object holding additional pageContext values, and where `documentHtml` is',
        errSuffix
    ].join(' '));
    (0, assertObjectKeys_1.assertObjectKeys)(hookReturnValue, ['documentHtml', 'pageContext', 'injectFilter'], errPrefix);
    if (hookReturnValue.injectFilter) {
        (0, utils_1.assertUsage)((0, utils_1.isCallable)(hookReturnValue.injectFilter), 'injectFilter should be a function');
        injectFilter = hookReturnValue.injectFilter;
    }
    if (hookReturnValue.documentHtml) {
        const val = hookReturnValue.documentHtml;
        const errBegin = `${errPrefix} returned \`{ documentHtml }\`, but documentHtml`;
        (0, utils_1.assertUsage)(typeof val !== 'string', [errBegin, 'is a plain JavaScript string which is forbidden: documentHtml should be', errSuffix].join(' '));
        (0, utils_1.assertUsage)((0, renderHtml_1.isDocumentHtml)(val), [errBegin, 'should be', errSuffix].join(' '));
        documentHtml = val;
    }
    if (hookReturnValue.pageContext) {
        const val = hookReturnValue.pageContext;
        const errBegin = `${errPrefix} returned \`{ pageContext }\`, but pageContext`;
        if ((0, utils_1.isPromise)(val) || (0, utils_1.isCallable)(val)) {
            (0, utils_1.assertWarning)(!(0, utils_1.isPromise)(val), `${errBegin} is a promise which is deprecated in favor of async functions, see https://vite-plugin-ssr.com/stream#initial-data-after-stream-end`, { onlyOnce: true, showStackTrace: false });
            pageContextPromise = val;
        }
        else {
            (0, utils_1.assertUsage)((0, utils_1.isObject)(val), `${errBegin} should be an object or an async function, see https://vite-plugin-ssr.com/stream#initial-data-after-stream-end`);
            (0, assertPageContextProvidedByUser_1.assertPageContextProvidedByUser)(val, { hook: renderHook });
            pageContextProvidedByRenderHook = val;
        }
    }
    return ret();
}
