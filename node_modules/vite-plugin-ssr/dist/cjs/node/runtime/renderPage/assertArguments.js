"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertArguments = void 0;
const utils_1 = require("../utils");
function assertArguments(...args) {
    const prefix = '[renderPage(pageContextInit)]';
    const pageContextInit = args[0];
    (0, utils_1.assertUsage)(pageContextInit, prefix + ' argument `pageContextInit` is missing');
    const len = args.length;
    (0, utils_1.assertUsage)(len === 1, `${prefix} You passed ${len} arguments but \`renderPage()\` accepts only one argument.'`);
    (0, utils_1.assertUsage)((0, utils_1.isPlainObject)(pageContextInit), `${prefix} \`pageContextInit\` should be a plain JavaScript object, but \`pageContextInit.constructor === ${pageContextInit.constructor}\``);
    if ('url' in pageContextInit) {
        (0, utils_1.assertWarning)(false, '`pageContext.url` has been renamed to `pageContext.urlOriginal`: replace `renderPage({ url })` with `renderPage({ urlOriginal })`. (See https://vite-plugin-ssr.com/migration/0.4.23 for more information.)', { showStackTrace: false, onlyOnce: true });
        pageContextInit.urlOriginal = pageContextInit.url;
        delete pageContextInit.url;
    }
    (0, utils_1.assert)(!('url' in pageContextInit));
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(pageContextInit, 'urlOriginal'), prefix + ' `pageContextInit` is missing the property `pageContextInit.urlOriginal`');
    (0, utils_1.assertUsage)(typeof pageContextInit.urlOriginal === 'string', prefix +
        ' `pageContextInit.urlOriginal` should be a string but `typeof pageContextInit.urlOriginal === "' +
        typeof pageContextInit.urlOriginal +
        '"`.');
    (0, utils_1.assertUsage)(pageContextInit.urlOriginal.startsWith('/') || pageContextInit.urlOriginal.startsWith('http'), prefix +
        ' `pageContextInit.urlOriginal` should start with `/` (e.g. `/product/42`) or `http` (e.g. `http://example.org/product/42`) but `pageContextInit.urlOriginal === "' +
        pageContextInit.urlOriginal +
        '"`');
    try {
        const { urlOriginal } = pageContextInit;
        const urlWithOrigin = urlOriginal.startsWith('http') ? urlOriginal : 'http://fake-origin.example.org' + urlOriginal;
        // We use `new URL()` to validate the URL. (`new URL(url)` throws an error if `url` isn't a valid URL.)
        new URL(urlWithOrigin);
    }
    catch (err) {
        (0, utils_1.assertUsage)(false, prefix +
            ' `pageContextInit.urlOriginal` should be a URL but `pageContextInit.urlOriginal==="' +
            pageContextInit.urlOriginal +
            '"`.');
    }
}
exports.assertArguments = assertArguments;
