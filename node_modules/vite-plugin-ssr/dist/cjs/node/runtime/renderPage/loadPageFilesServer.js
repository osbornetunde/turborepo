"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPageFilesServer = void 0;
const getPageFiles_1 = require("../../../shared/getPageFiles");
const analyzePageClientSide_1 = require("../../../shared/getPageFiles/analyzePageClientSide");
const utils_1 = require("../utils");
const getPageAssets_1 = require("./getPageAssets");
const loadPageFilesServerSide_1 = require("../../../shared/getPageFiles/analyzePageServerSide/loadPageFilesServerSide");
const debugPageFiles_1 = require("./debugPageFiles");
const findPageConfig_1 = require("../../../shared/page-configs/findPageConfig");
const analyzePage_1 = require("./analyzePage");
const globalContext_1 = require("../globalContext");
async function loadPageFilesServer(pageContext) {
    const pageConfig = (0, findPageConfig_1.findPageConfig)(pageContext._pageConfigs, pageContext._pageId); // Make pageConfig globally available as pageContext._pageConfig?
    const [{ config, configEntries, exports, exportsAll, pageExports, pageFilesLoaded, pageConfigLoaded }] = await Promise.all([
        (0, loadPageFilesServerSide_1.loadPageFilesServerSide)(pageContext._pageFilesAll, pageConfig, pageContext._pageId, !(0, globalContext_1.getGlobalContext)().isProduction),
        (0, analyzePageClientSide_1.analyzePageClientSideInit)(pageContext._pageFilesAll, pageContext._pageId, { sharedPageFilesAlreadyLoaded: true })
    ]);
    const { isHtmlOnly, isClientRouting, clientEntries, clientDependencies, pageFilesClientSide, pageFilesServerSide } = (0, analyzePage_1.analyzePage)(pageContext._pageFilesAll, pageConfig, pageContext._pageId);
    const pageContextAddendum = {};
    (0, utils_1.objectAssign)(pageContextAddendum, {
        config,
        configEntries,
        exports,
        exportsAll,
        pageExports,
        Page: exports.Page,
        _isHtmlOnly: isHtmlOnly,
        _passToClient: (0, getPageFiles_1.getExportUnion)(exportsAll, 'passToClient'),
        _pageFilePathsLoaded: pageFilesLoaded.map((p) => p.filePath)
    });
    (0, utils_1.objectAssign)(pageContextAddendum, {
        __getPageAssets: async () => {
            if ('_pageAssets' in pageContext) {
                return pageContext._pageAssets;
            }
            else {
                const pageAssets = await (0, getPageAssets_1.getPageAssets)(pageContext, clientDependencies, clientEntries);
                (0, utils_1.objectAssign)(pageContext, { _pageAssets: pageAssets });
                return pageContext._pageAssets;
            }
        }
    });
    // TODO: remove this on next semver major
    Object.assign(pageContextAddendum, {
        _getPageAssets: async () => {
            (0, utils_1.assertWarning)(false, 'pageContext._getPageAssets() deprecated, see https://vite-plugin-ssr.com/preload', {
                onlyOnce: true,
                showStackTrace: true
            });
            const pageAssetsOldFormat = [];
            (await pageContextAddendum.__getPageAssets()).forEach((p) => {
                if (p.assetType === 'script' && p.isEntry) {
                    pageAssetsOldFormat.push({
                        src: p.src,
                        preloadType: null,
                        assetType: 'script',
                        mediaType: p.mediaType
                    });
                }
                pageAssetsOldFormat.push({
                    src: p.src,
                    preloadType: p.assetType,
                    assetType: p.assetType === 'style' ? 'style' : 'preload',
                    mediaType: p.mediaType
                });
            });
            return pageAssetsOldFormat;
        }
    });
    {
        (0, debugPageFiles_1.debugPageFiles)({
            pageContext,
            isHtmlOnly,
            isClientRouting,
            pageFilesLoaded,
            pageFilesClientSide,
            pageFilesServerSide,
            clientEntries,
            clientDependencies
        });
    }
    return pageContextAddendum;
}
exports.loadPageFilesServer = loadPageFilesServer;
