"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log404 = void 0;
const route_1 = require("../../../shared/route");
const globalContext_1 = require("../globalContext");
const utils_1 = require("../utils");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const RenderErrorPage_1 = require("../../../shared/route/RenderErrorPage");
async function log404(pageContext) {
    const { urlPathname } = pageContext;
    if ((0, RenderErrorPage_1.isRenderErrorPageException)(pageContext.errorWhileRendering)) {
        (0, utils_1.assertInfo)(false, `${picocolors_1.default.cyan('throw RenderErrorPage()')} was thrown while rendering URL ${picocolors_1.default.bold(urlPathname)} (this log isn't shown in production)`, { onlyOnce: false });
        return;
    }
    const { pageRoutes } = await (0, route_1.loadPageRoutes)(pageContext._pageFilesAll, pageContext._pageConfigs, pageContext._pageConfigGlobal, pageContext._allPageIds);
    (0, utils_1.assertUsage)(pageRoutes.length > 0, 'No page found. Create a file that ends with the suffix `.page.js` (or `.page.vue`, `.page.jsx`, ...).');
    const globalContext = (0, globalContext_1.getGlobalContext)();
    if (!globalContext.isProduction && !isFileRequest(urlPathname) && !pageContext.isClientSideNavigation) {
        (0, utils_1.assertInfo)(false, [
            `URL ${picocolors_1.default.bold(urlPathname)} isn't matching any of your page routes. See https://vite-plugin-ssr.com/routing for more information about routing. Set the environment variable ${picocolors_1.default.cyan('DEBUG=vps:routing')} to inspect your app's routing. (This log isn't shown in production.) Your page routes:`,
            getPagesAndRoutesInfo(pageRoutes)
        ].join('\n'), { onlyOnce: false });
    }
}
exports.log404 = log404;
function getPagesAndRoutesInfo(pageRoutes) {
    const entries = pageRoutes
        .map((pageRoute) => {
        let routeStr;
        let routeTypeSrc;
        let routeDefinedBy;
        if (pageRoute.routeType === 'FILESYSTEM') {
            (0, utils_1.assert)(pageRoute.routeFilesystemDefinedBy);
            routeDefinedBy = pageRoute.routeFilesystemDefinedBy;
        }
        else {
            (0, utils_1.assert)(pageRoute.routeDefinedAt);
            routeDefinedBy = pageRoute.routeDefinedAt;
        }
        if (pageRoute.routeType === 'STRING') {
            routeStr = pageRoute.routeString;
            routeTypeSrc = 'Route String';
        }
        else if (pageRoute.routeType === 'FUNCTION') {
            routeStr = truncateString(String(pageRoute.routeFunction).split(/\s/).filter(Boolean).join(' '), 64);
            routeTypeSrc = 'Route Function';
        }
        else {
            routeStr = pageRoute.routeString;
            routeTypeSrc = 'Filesystem Route';
        }
        (0, utils_1.assert)(routeStr && routeTypeSrc && routeDefinedBy);
        return { routeStr, routeTypeSrc, routeDefinedBy };
    })
        .sort((e1, e2) => {
        if (e1.routeTypeSrc !== 'Route Function' && e2.routeTypeSrc === 'Route Function') {
            return -1;
        }
        if (e1.routeTypeSrc === 'Route Function' && e2.routeTypeSrc !== 'Route Function') {
            return 1;
        }
        return (0, utils_1.compareString)(e1.routeStr, e2.routeStr);
    });
    const lines = [
        {
            routeStr: 'ROUTE',
            routeTypeSrc: 'ROUTE TYPE',
            routeDefinedBy: 'DEFINED BY'
        },
        ...entries
    ];
    const column1Width = 2 + Math.max(...lines.map(({ routeStr }) => routeStr.length));
    const column2Width = 2 + Math.max(...lines.map(({ routeTypeSrc }) => routeTypeSrc.length));
    const column3Width = 2 + Math.max(...lines.map(({ routeDefinedBy }) => routeDefinedBy.length));
    return lines
        .map(({ routeStr, routeTypeSrc, routeDefinedBy }, i) => {
        let cell1 = routeStr.padEnd(column1Width, ' ');
        if (i !== 0)
            cell1 = picocolors_1.default.bold(cell1);
        let cell2 = routeTypeSrc.padEnd(column2Width, ' ');
        let cell3 = routeDefinedBy.padEnd(column3Width, ' ');
        if (i === 0) {
            cell1 = picocolors_1.default.gray(cell1);
            cell2 = picocolors_1.default.gray(cell2);
            cell3 = picocolors_1.default.gray(cell3);
        }
        const line = [cell1, cell2, cell3].join(' ');
        return line;
    })
        .join('\n');
}
function truncateString(str, len) {
    if (len > str.length) {
        return str;
    }
    else {
        str = str.substring(0, len);
        return str + '...';
    }
}
function isFileRequest(urlPathname) {
    (0, utils_1.assert)(urlPathname.startsWith('/'));
    const paths = urlPathname.split('/');
    const lastPath = paths[paths.length - 1];
    (0, utils_1.assert)(typeof lastPath === 'string');
    const parts = lastPath.split('.');
    if (parts.length < 2) {
        return false;
    }
    const fileExtension = parts[parts.length - 1];
    (0, utils_1.assert)(typeof fileExtension === 'string');
    return /^[a-z0-9]+$/.test(fileExtension);
}
