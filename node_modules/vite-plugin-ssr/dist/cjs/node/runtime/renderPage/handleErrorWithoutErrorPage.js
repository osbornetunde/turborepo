"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.warnMissingErrorPage = exports.handleErrorWithoutErrorPage = void 0;
const stringify_1 = require("@brillout/json-serializer/stringify");
const globalContext_1 = require("../globalContext");
const utils_1 = require("../utils");
const createHttpResponseObject_1 = require("./createHttpResponseObject");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
async function handleErrorWithoutErrorPage(pageContext) {
    (0, utils_1.assert)(pageContext._pageId === null); // User didn't define a `_error.page.js` file
    (0, utils_1.assert)(pageContext.errorWhileRendering || pageContext.is404);
    if (!pageContext.isClientSideNavigation) {
        (0, utils_1.objectAssign)(pageContext, { httpResponse: null });
        return pageContext;
    }
    else {
        const __getPageAssets = async () => [];
        (0, utils_1.objectAssign)(pageContext, { __getPageAssets });
        const httpResponse = await (0, createHttpResponseObject_1.createHttpResponseObject)((0, stringify_1.stringify)({ serverSideError: true }), null, pageContext);
        (0, utils_1.objectAssign)(pageContext, { httpResponse });
        return pageContext;
    }
}
exports.handleErrorWithoutErrorPage = handleErrorWithoutErrorPage;
function warnMissingErrorPage(isV1) {
    const globalContext = (0, globalContext_1.getGlobalContext)();
    if (!globalContext.isProduction) {
        const msg = isV1
            ? // TODO/v1: improve error message
                "No error page found. It's recommended to create one."
            : `No ${picocolors_1.default.cyan('_error.page.js')} found. We recommend creating a ${picocolors_1.default.cyan('_error.page.js')} file. See https://vite-plugin-ssr.com/error-page for more information. (This warning isn't shown in production.)`;
        (0, utils_1.assertWarning)(false, msg, { showStackTrace: false, onlyOnce: false });
    }
}
exports.warnMissingErrorPage = warnMissingErrorPage;
