"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializePageContextClientSide = void 0;
const stringify_1 = require("@brillout/json-serializer/stringify");
const utils_1 = require("../utils");
const error_page_1 = require("../../../shared/error-page");
const addIs404ToPageProps_1 = require("../../../shared/addIs404ToPageProps");
function serializePageContextClientSide(pageContext) {
    const pageContextClient = { _pageId: pageContext._pageId };
    let passToClient = [...pageContext._passToClient];
    if ((0, error_page_1.isErrorPage)(pageContext._pageId, pageContext._pageConfigs)) {
        (0, utils_1.assert)((0, utils_1.hasProp)(pageContext, 'is404', 'boolean'));
        (0, addIs404ToPageProps_1.addIs404ToPageProps)(pageContext);
        passToClient.push(...['pageProps', 'is404', '_isError']);
    }
    passToClient = (0, utils_1.unique)(passToClient);
    passToClient.forEach((prop) => {
        pageContextClient[prop] = pageContext[prop];
    });
    /*
    if (hasProp(pageContext, '_serverSideErrorWhileStreaming')) {
      assert(pageContext._serverSideErrorWhileStreaming === true)
      pageContextClient['_serverSideErrorWhileStreaming'] = true
    }
    */
    (0, utils_1.assert)((0, utils_1.isPlainObject)(pageContextClient));
    let pageContextSerialized;
    const pageContextClientWrapper = { pageContext: pageContextClient };
    try {
        pageContextSerialized = (0, stringify_1.stringify)(pageContextClientWrapper, { forbidReactElements: true });
    }
    catch (err) {
        passToClient.forEach((prop) => {
            const valueName = `pageContext['${prop}']`;
            try {
                (0, stringify_1.stringify)(pageContext[prop], { forbidReactElements: true, valueName });
            }
            catch (err) {
                (0, utils_1.assert)((0, utils_1.hasProp)(err, 'message', 'string'));
                (0, utils_1.assertUsage)(false, `\`${valueName}\` cannot be serialized and, therefore, cannot be passed to the client. Make sure that \`${valueName}\` is serializable or remove \`'${prop}'\` from \`passToClient\`. Serialization error: ${lowercaseFirstLetter(err.message)}`);
            }
        });
        console.error(err);
        (0, utils_1.assert)(false);
    }
    return pageContextSerialized;
}
exports.serializePageContextClientSide = serializePageContextClientSide;
function lowercaseFirstLetter(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}
