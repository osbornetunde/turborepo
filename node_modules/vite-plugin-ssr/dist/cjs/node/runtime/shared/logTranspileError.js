"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripBomTag = exports.isTranspileError = exports.logTranspileError = void 0;
// Copied & adapted from https://github.com/vitejs/vite/blob/9c114c5c72a6af87e3330d5573362554b4511265/packages/vite/src/node/server/middlewares/error.ts
// import strip from 'strip-ansi'
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const utils_1 = require("../utils");
function isTranspileError(err) {
    return (0, utils_1.isObject)(err) && !!err.id && !!err.frame;
}
exports.isTranspileError = isTranspileError;
function buildErrorMessage(err, args = [], includeStack = true) {
    if (err.plugin)
        args.push(`  Plugin: ${picocolors_1.default.magenta(err.plugin)}`);
    const loc = err.loc ? `:${err.loc.line}:${err.loc.column}` : '';
    if (err.id)
        args.push(`  File: ${picocolors_1.default.cyan(err.id)}${loc}`);
    if (err.frame)
        args.push(picocolors_1.default.yellow(pad(err.frame)));
    if (includeStack && err.stack)
        args.push(pad(cleanStack(err.stack)));
    return args.join('\n');
}
function logTranspileError(server, err) {
    const msg = buildErrorMessage(err, [picocolors_1.default.red(`Transpilation Error. ${err.message}`)]);
    server.config.logger.error(msg, {
        clear: true,
        timestamp: true,
        error: err // avoid Rollup and Vite's Rollup version mismatch
    });
    /* Showing the error layover doesn't properly work
    server.ws.send({
      type: 'error',
      err: prepareError(err)
    })
    */
}
exports.logTranspileError = logTranspileError;
/*
function prepareError(err: any): any {
  // only copy the information we need and avoid serializing unnecessary
  // properties, since some errors may attach full objects (e.g. PostCSS)
  return {
    message: strip(err.message),
    stack: strip(cleanStack(err.stack || '')),
    id: err.id,
    frame: strip(err.frame || ''),
    plugin: err.plugin,
    pluginCode: err.pluginCode,
    loc: err.loc
  }
}
*/
// strip UTF-8 BOM
function stripBomTag(content) {
    if (content.charCodeAt(0) === 0xfeff) {
        return content.slice(1);
    }
    return content;
}
exports.stripBomTag = stripBomTag;
const splitRE = /\r?\n/;
function pad(source, n = 2) {
    const lines = source.split(splitRE);
    return lines.map((l) => ` `.repeat(n) + l).join(`\n`);
}
function cleanStack(stack) {
    return stack
        .split(/\n/g)
        .filter((l) => /^\s*at/.test(l))
        .join('\n');
}
