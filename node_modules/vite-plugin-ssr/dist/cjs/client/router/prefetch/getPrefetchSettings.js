"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrefetchSettings = void 0;
const utils_1 = require("../utils");
function getPrefetchSettings(pageContext, linkTag) {
    let prefetchStaticAssets = getPrefetchStaticAssets(pageContext, linkTag);
    if (prefetchStaticAssets === 'viewport' && !pageContext._isProduction) {
        (0, utils_1.assertInfo)(false, 'Viewport prefetching is disabled in development', { onlyOnce: true });
        prefetchStaticAssets = 'hover';
    }
    return {
        prefetchStaticAssets
    };
}
exports.getPrefetchSettings = getPrefetchSettings;
function getPrefetchStaticAssets(pageContext, linkTag) {
    {
        const prefetchAttribute = getPrefetchAttribute(linkTag);
        if (prefetchAttribute !== null)
            return prefetchAttribute;
    }
    if ('prefetchLinks' in pageContext.exports) {
        (0, utils_1.assertUsage)(false, '`export { prefetchLinks }` is deprecated, use `export { prefetchStaticAssets }` instead.');
    }
    if ('prefetchStaticAssets' in pageContext.exports) {
        const { prefetchStaticAssets } = pageContext.exports;
        if (prefetchStaticAssets === false) {
            return false;
        }
        if (prefetchStaticAssets === 'hover') {
            return 'hover';
        }
        if (prefetchStaticAssets === 'viewport') {
            return 'viewport';
        }
        const wrongUsageMsg = "prefetchStaticAssets value should be false, 'hover', or 'viewport'";
        // TODO/v1-release: remove
        (0, utils_1.assertUsage)((0, utils_1.isPlainObject)(prefetchStaticAssets), wrongUsageMsg);
        const keys = Object.keys(prefetchStaticAssets);
        (0, utils_1.assertUsage)(keys.length === 1 && keys[0] === 'when', wrongUsageMsg);
        const { when } = prefetchStaticAssets;
        if (when === 'HOVER' || when === 'VIEWPORT') {
            const correctValue = when.toLowerCase();
            (0, utils_1.assertWarning)(false, `prefetchStaticAssets value \`{ when: '${when}' }\` is outdated: set prefetchStaticAssets to '${correctValue}' instead`, { onlyOnce: true, showStackTrace: false });
            return correctValue;
        }
        (0, utils_1.assertUsage)(false, wrongUsageMsg);
    }
    return 'hover';
}
function getPrefetchAttribute(linkTag) {
    const attr = linkTag.getAttribute('data-prefetch-static-assets');
    const attrOld = linkTag.getAttribute('data-prefetch');
    if (attr === null && attrOld === null) {
        return null;
    }
    const deprecationNotice = 'The attribute data-prefetch is outdated, use data-prefetch-static-assets instead.';
    if (attr) {
        (0, utils_1.assertUsage)(attrOld === null, deprecationNotice);
        if (attr === 'hover' || attr === 'viewport') {
            return attr;
        }
        if (attr === 'false') {
            return false;
        }
        (0, utils_1.assertUsage)(false, `data-prefetch-static-assets has value "${attr}" but it should instead be "false", "hover", or "viewport"`);
    }
    // TODO/v1-release: remove
    if (attrOld) {
        (0, utils_1.assert)(!attr);
        (0, utils_1.assertWarning)(false, deprecationNotice, {
            showStackTrace: false,
            onlyOnce: true
        });
        if (attrOld === 'true') {
            return 'viewport';
        }
        if (attrOld === 'false') {
            return 'hover';
        }
        (0, utils_1.assertUsage)(false, `data-prefetch has value "${attrOld}" but it should instead be "true" or "false"`);
    }
    (0, utils_1.assert)(false);
}
