"use strict";
// Mechanism to ensure code isn't loaded by production runtime
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertServerEnv = exports.markEnvAsPlugin = exports.markEnvAsPreview = exports.markEnvAsDev = exports.assertIsVitePluginCode = void 0;
const assert_1 = require("./assert");
const getGlobalObject_1 = require("./getGlobalObject");
const isBrowser_1 = require("./isBrowser");
const isVitest_1 = require("./isVitest");
(0, assert_1.assert)(!(0, isBrowser_1.isBrowser)());
const state = (0, getGlobalObject_1.getGlobalObject)('utils/assertIsVitePluginCode.ts', {});
// Called by *.ts that want to ensure that they aren't loaded by the production runtime
function assertIsVitePluginCode() {
    state.shouldBePlugin = true;
}
exports.assertIsVitePluginCode = assertIsVitePluginCode;
// Called by Vite hook configureServer()
function markEnvAsDev() {
    state.isDev = true;
}
exports.markEnvAsDev = markEnvAsDev;
// Called by Vite hook configurePreviewServer()
function markEnvAsPreview() {
    state.isPreview = true;
}
exports.markEnvAsPreview = markEnvAsPreview;
// Called by ../node/plugin/index.ts
function markEnvAsPlugin() {
    state.isPlugin = true;
}
exports.markEnvAsPlugin = markEnvAsPlugin;
// Called by ../node/runtime/index.ts
function assertServerEnv() {
    if ((0, isVitest_1.isVitest)())
        return;
    if (!state.isDev && !state.isPreview) {
        // Ensure that no plugin code is loaded by production runtime
        (0, assert_1.assert)(!state.isPlugin);
        (0, assert_1.assert)(!state.shouldBePlugin);
    }
    else {
        (0, assert_1.assert)(state.isPlugin);
        (0, assert_1.assert)(state.shouldBePlugin);
    }
}
exports.assertServerEnv = assertServerEnv;
