"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilePathAbsolute = void 0;
const filesystemPathHandling_1 = require("./filesystemPathHandling");
const assert_1 = require("./assert");
const path_1 = __importDefault(require("path"));
const assertIsVitePluginCode_1 = require("./assertIsVitePluginCode");
const isNpmPackage_1 = require("./isNpmPackage");
(0, assertIsVitePluginCode_1.assertIsVitePluginCode)();
// Vite handles paths such as /pages/index.page.js which are relative to `config.root`.
// Make them absolute starting from the filesystem root.
// Also resolve plus files living in npm packages such as restack/renderer/+onRenderHtml.js
function getFilePathAbsolute(filePath, config) {
    (0, filesystemPathHandling_1.assertPosixPath)(filePath);
    if (filePath.startsWith('/@fs/')) {
        return filePath;
    }
    let filePathUnresolved;
    if ((0, isNpmPackage_1.isNpmPackageImport)(filePath)) {
        filePathUnresolved = filePath;
    }
    else {
        (0, assert_1.assert)(filePath.startsWith('/'));
        const { root } = config;
        assertFsAbsolute(root);
        filePathUnresolved = path_1.default.posix.join(root, filePath);
        assertFsAbsolute(filePathUnresolved);
    }
    let filePathAbsolute;
    try {
        filePathAbsolute = require.resolve(filePathUnresolved, { paths: [config.root] });
    }
    catch (err) {
        console.error(err);
        (0, assert_1.assert)(false);
    }
    filePathAbsolute = (0, filesystemPathHandling_1.toPosixPath)(filePathAbsolute);
    assertFsAbsolute(filePathAbsolute);
    return filePathAbsolute;
}
exports.getFilePathAbsolute = getFilePathAbsolute;
/** Assert path is filesystem absolute */
function assertFsAbsolute(p) {
    (0, filesystemPathHandling_1.assertPosixPath)(p);
    if (process.platform === 'win32') {
        (0, assert_1.assert)(path_1.default.win32.isAbsolute(p));
    }
    else {
        (0, assert_1.assert)(p.startsWith('/'));
    }
}
