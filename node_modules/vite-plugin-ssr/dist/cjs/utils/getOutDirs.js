"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineOutDir = exports.getOutDirs_prerender = exports.getOutDirs = void 0;
const viteIsSSR_1 = require("./viteIsSSR");
const assert_1 = require("./assert");
const path_shim_1 = require("./path-shim");
const filesystemPathHandling_1 = require("./filesystemPathHandling");
function getOutDirs(config) {
    const outDir = config.build.outDir;
    (0, filesystemPathHandling_1.assertPosixPath)(outDir);
    assertIsNotOutDirRoot(outDir);
    assertConfig(config);
    (0, assert_1.assert)('/client'.length === '/server'.length);
    let outDirRoot = outDir.slice(0, -1 * '/client'.length);
    return getAllOutDirs(outDirRoot, config.root);
}
exports.getOutDirs = getOutDirs;
function getOutDirs_prerender(config) {
    const outDirRoot = config.build.outDir;
    (0, filesystemPathHandling_1.assertPosixPath)(outDirRoot);
    assertIsOutDirRoot(outDirRoot);
    return getAllOutDirs(outDirRoot, config.root);
}
exports.getOutDirs_prerender = getOutDirs_prerender;
/** Appends `client/` or `server/` to `config.build.outDir` */
function determineOutDir(config) {
    let outDirRoot = config.build?.outDir || 'dist';
    (0, filesystemPathHandling_1.assertPosixPath)(outDirRoot);
    // If using Telefunc + vite-plugin-ssr then `config.build.outDir` may already be set
    if (!isOutDirRoot(outDirRoot)) {
        assertConfig(config);
        return outDirRoot;
    }
    const { outDirClient, outDirServer } = declineOutDirs(outDirRoot);
    if ((0, viteIsSSR_1.viteIsSSR)(config)) {
        return outDirServer;
    }
    else {
        return outDirClient;
    }
}
exports.determineOutDir = determineOutDir;
function getAllOutDirs(outDirRoot, root) {
    if (!outDirIsAbsolutePath(outDirRoot)) {
        (0, filesystemPathHandling_1.assertPosixPath)(outDirRoot);
        (0, filesystemPathHandling_1.assertPosixPath)(root);
        outDirRoot = (0, path_shim_1.pathJoin)(root, outDirRoot);
    }
    let { outDirClient, outDirServer } = declineOutDirs(outDirRoot);
    outDirRoot = outDirRoot + '/';
    outDirClient = outDirClient + '/';
    outDirServer = outDirServer + '/';
    assertNormalization(outDirRoot);
    assertNormalization(outDirClient);
    assertNormalization(outDirServer);
    return { outDirRoot, outDirClient, outDirServer };
}
function assertNormalization(outDirAny) {
    (0, filesystemPathHandling_1.assertPosixPath)(outDirAny);
    (0, assert_1.assert)(outDirIsAbsolutePath(outDirAny));
    (0, assert_1.assert)(outDirAny.endsWith('/'));
    (0, assert_1.assert)(!outDirAny.endsWith('//'));
}
function declineOutDirs(outDirRoot) {
    assertIsOutDirRoot(outDirRoot);
    (0, filesystemPathHandling_1.assertPosixPath)(outDirRoot);
    const outDirClient = (0, path_shim_1.pathJoin)(outDirRoot, 'client');
    const outDirServer = (0, path_shim_1.pathJoin)(outDirRoot, 'server');
    assertIsNotOutDirRoot(outDirClient);
    assertIsNotOutDirRoot(outDirServer);
    return { outDirClient, outDirServer };
}
function assertIsOutDirRoot(outDir) {
    (0, assert_1.assert)(isOutDirRoot(outDir));
}
function isOutDirRoot(outDir) {
    const p = outDir.split('/').filter(Boolean);
    const lastDir = p[p.length - 1];
    return lastDir !== 'client' && lastDir !== 'server';
}
function assertIsNotOutDirRoot(outDir) {
    (0, assert_1.assert)(outDir.endsWith('/client') || outDir.endsWith('/server'));
}
function assertConfig(config) {
    const outDir = config.build?.outDir;
    (0, assert_1.assert)(outDir);
    assertIsNotOutDirRoot(outDir);
    if ((0, viteIsSSR_1.viteIsSSR)(config)) {
        (0, assert_1.assert)(outDir.endsWith('/server'));
    }
    else {
        (0, assert_1.assert)(outDir.endsWith('/client'));
    }
}
function outDirIsAbsolutePath(outDir) {
    // There doesn't seem to be a better alternative to determine whether `outDir` is an aboslute path
    //  - Very unlikely that `outDir`'s first dir macthes the filesystem's first dir
    return getFirstDir(outDir) === getFirstDir(process.cwd());
}
function getFirstDir(p) {
    const firstDir = p.split(/\/|\\/).filter(Boolean)[0];
    return firstDir;
}
