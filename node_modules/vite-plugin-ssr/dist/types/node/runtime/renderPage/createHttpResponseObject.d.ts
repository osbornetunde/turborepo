/// <reference types="node" />
export { createHttpResponseObject };
export type { HttpResponse };
import { StreamPipeNode, StreamPipeWeb, StreamReadableNode, StreamReadableWeb, StreamWritableNode, StreamWritableWeb } from '../html/stream';
import type { PageAsset, GetPageAssets } from './getPageAssets';
import { type HtmlRender } from '../html/renderHtml';
import type { PageConfig } from '../../../shared/page-configs/PageConfig';
import type { RenderHook } from './executeOnRenderHtmlHook';
type StatusCode = 200 | 404 | 500;
type ContentType = 'application/json' | 'text/html;charset=utf-8';
type EarlyHint = PageAsset & {
    earlyHintLink: string;
};
type HttpResponse = {
    statusCode: StatusCode;
    contentType: ContentType;
    body: string;
    getBody: () => Promise<string>;
    getReadableWebStream: () => StreamReadableWeb;
    pipe: (writable: StreamWritableWeb | StreamWritableNode) => void;
    earlyHints: EarlyHint[];
    /** @deprecated */
    getNodeStream: () => Promise<StreamReadableNode>;
    /** @deprecated */
    getWebStream: () => StreamReadableWeb;
    /** @deprecated */
    pipeToNodeWritable: StreamPipeNode;
    /** @deprecated */
    pipeToWebWritable: StreamPipeWeb;
};
declare function createHttpResponseObject(htmlRender: null | HtmlRender, renderHook: null | RenderHook, pageContext: {
    isClientSideNavigation: boolean;
    _pageId: null | string;
    is404: null | boolean;
    errorWhileRendering: null | Error;
    __getPageAssets: GetPageAssets;
    _pageConfigs: PageConfig[];
}): Promise<HttpResponse | null>;
