export { getPageContext };
export { getPageContextErrorPage };
export { checkIf404 };
import { navigationState } from '../navigationState';
import { assert, assertUsage, hasProp, isPlainObject, objectAssign, getProjectError, serverSideRouteTo, callHookWithTimeout, isObject } from './utils';
import { parse } from '@brillout/json-serializer/parse';
import { getPageContextSerializedInHtml } from '../getPageContextSerializedInHtml';
import { analyzePageServerSide } from '../../shared/getPageFiles/analyzePageServerSide';
import { route } from '../../shared/route';
import { getErrorPageId } from '../../shared/error-page';
import { getHook } from '../../shared/getHook';
import { releasePageContext } from '../releasePageContext';
import { loadPageFilesClientSide } from '../loadPageFilesClientSide';
import { removeBuiltInOverrides } from './getPageContext/removeBuiltInOverrides';
import { getPageContextRequestUrl } from '../../shared/getPageContextRequestUrl';
import { getCodeFilePath, getPageConfig } from '../../shared/page-configs/utils';
import { assertOnBeforeRenderHookReturn } from '../../shared/assertOnBeforeRenderHookReturn';
async function getPageContext(pageContext) {
    if (pageContext._isFirstRenderAttempt && navigationState.isFirstUrl(pageContext.urlOriginal)) {
        assert(hasProp(pageContext, '_isFirstRenderAttempt', 'true'));
        return getPageContextFirstRender(pageContext);
    }
    else {
        assert(hasProp(pageContext, '_isFirstRenderAttempt', 'false'));
        return getPageContextUponNavigation(pageContext);
    }
}
async function getPageContextFirstRender(pageContext) {
    const pageContextAddendum = getPageContextSerializedInHtml();
    removeBuiltInOverrides(pageContextAddendum);
    objectAssign(pageContextAddendum, {
        isHydration: true,
        _comesDirectlyFromServer: true
    });
    objectAssign(pageContextAddendum, await loadPageFilesClientSide(pageContext._pageFilesAll, pageContext._pageConfigs, pageContextAddendum._pageId));
    return pageContextAddendum;
}
async function getPageContextErrorPage(pageContext) {
    const errorPageId = getErrorPageId(pageContext._pageFilesAll, pageContext._pageConfigs);
    if (!errorPageId) {
        throw new Error('No error page');
    }
    const pageContextAddendum = {
        isHydration: false,
        _pageId: errorPageId,
        _pageContextRetrievedFromServer: null,
        _comesDirectlyFromServer: false
    };
    objectAssign(pageContextAddendum, await loadPageFilesClientSide(pageContext._pageFilesAll, pageContext._pageConfigs, pageContextAddendum._pageId));
    return pageContextAddendum;
}
async function getPageContextUponNavigation(pageContext) {
    let pageContextAddendum = {};
    objectAssign(pageContextAddendum, {
        isHydration: false
    });
    objectAssign(pageContextAddendum, await getPageContextFromRoute(pageContext));
    objectAssign(pageContextAddendum, await loadPageFilesClientSide(pageContext._pageFilesAll, pageContext._pageConfigs, pageContextAddendum._pageId));
    const pageContextFromHook = await onBeforeRenderExecute({ ...pageContext, ...pageContextAddendum });
    assert([true, false].includes(pageContextFromHook._comesDirectlyFromServer));
    if (!pageContextFromHook['_isError']) {
        objectAssign(pageContextAddendum, pageContextFromHook);
        return pageContextAddendum;
    }
    else {
        pageContextAddendum = {};
        assert(pageContextFromHook._comesDirectlyFromServer === true);
        assert(hasProp(pageContextFromHook, 'is404', 'boolean'));
        assert(hasProp(pageContextFromHook, 'pageProps', 'object'));
        assert(hasProp(pageContextFromHook.pageProps, 'is404', 'boolean'));
        // When the user hasn't define a `_error.page.js` file: the mechanism with `serverSideError: true` is used instead
        assert(!('serverSideError' in pageContextFromHook));
        const errorPageId = getErrorPageId(pageContext._pageFilesAll, pageContext._pageConfigs);
        assert(errorPageId);
        objectAssign(pageContextAddendum, {
            isHydration: false,
            _pageId: errorPageId
        });
        objectAssign(pageContextAddendum, pageContextFromHook);
        objectAssign(pageContextAddendum, await loadPageFilesClientSide(pageContext._pageFilesAll, pageContext._pageConfigs, pageContextAddendum._pageId));
        return pageContextAddendum;
    }
}
async function onBeforeRenderExecute(pageContext) {
    // `export { onBeforeRender }` defined in `.page.client.js` or `.page.js`
    const hook = getHook(pageContext, 'onBeforeRender');
    if (hook) {
        const onBeforeRender = hook.hookFn;
        const pageContextAddendum = {
            _comesDirectlyFromServer: false,
            _pageContextRetrievedFromServer: null
        };
        const pageContextReadyForRelease = releasePageContext({
            ...pageContext,
            ...pageContextAddendum
        }, true);
        const hookResult = await callHookWithTimeout(() => onBeforeRender(pageContextReadyForRelease), 'onBeforeRender', hook.hookFilePath);
        assertOnBeforeRenderHookReturn(hookResult, hook.hookFilePath);
        const pageContextFromHook = hookResult === null || hookResult === void 0 ? void 0 : hookResult.pageContext;
        objectAssign(pageContextAddendum, pageContextFromHook);
        return pageContextAddendum;
    }
    // `export { onBeforeRender }` defined in `.page.server.js`
    if (await onBeforeRenderServerSideExists(pageContext)) {
        const pageContextFromServer = await retrievePageContextFromServer(pageContext);
        const pageContextAddendum = {};
        Object.assign(pageContextAddendum, pageContextFromServer);
        objectAssign(pageContextAddendum, {
            _comesDirectlyFromServer: true,
            _pageContextRetrievedFromServer: pageContextFromServer
        });
        return pageContextAddendum;
    }
    // No `export { onBeforeRender }` defined
    const pageContextAddendum = { _comesDirectlyFromServer: false, _pageContextRetrievedFromServer: null };
    return pageContextAddendum;
}
async function onBeforeRenderServerSideExists(pageContext) {
    if (pageContext._pageConfigs.length > 0) {
        const pageConfig = getPageConfig(pageContext._pageId, pageContext._pageConfigs);
        return (!!getCodeFilePath(pageConfig, 'onBeforeRender') &&
            pageConfig.configElements.onBeforeRender.configEnv === 'server-only');
    }
    else {
        const { hasOnBeforeRenderServerSideOnlyHook } = await analyzePageServerSide(pageContext._pageFilesAll, pageContext._pageId);
        return hasOnBeforeRenderServerSideOnlyHook;
    }
}
async function getPageContextFromRoute(pageContext) {
    const routeResult = await route(pageContext);
    const pageContextFromRoute = routeResult.pageContextAddendum;
    if (!pageContextFromRoute._pageId) {
        const err = new Error('No routing match');
        markIs404(err);
        throw err;
    }
    assert(hasProp(pageContextFromRoute, '_pageId', 'string'));
    return pageContextFromRoute;
}
function markIs404(err) {
    objectAssign(err, { _is404: true });
}
function checkIf404(err) {
    return isObject(err) && err._is404 === true;
}
async function retrievePageContextFromServer(pageContext) {
    var _a;
    const pageContextUrl = getPageContextRequestUrl((_a = pageContext._urlPristine) !== null && _a !== void 0 ? _a : pageContext.urlOriginal);
    const response = await fetch(pageContextUrl);
    {
        const contentType = response.headers.get('content-type');
        const isRightContentType = contentType && contentType.includes('application/json');
        // Static hosts + page doesn't exist
        if (!isRightContentType && response.status === 404) {
            serverSideRouteTo(pageContext.urlOriginal);
            const err = new Error("Page doesn't exist");
            Object.assign(err, { _abortRendering: true });
            throw err;
        }
        assertUsage(isRightContentType, `Wrong HTTP Response Header \`content-type\` value for URL ${pageContextUrl} (it should be \`application/json\` but we got \`${contentType}\`). Make sure to use \`pageContext.httpResponse.contentType\`, see https://github.com/brillout/vite-plugin-ssr/issues/191`);
    }
    const responseText = await response.text();
    const responseObject = parse(responseText);
    if ('serverSideError' in responseObject) {
        throw getProjectError('`pageContext` could not be fetched from the server as an error occurred on the server; check your server logs.');
    }
    assert(hasProp(responseObject, 'pageContext'));
    const pageContextFromServer = responseObject.pageContext;
    assert(isPlainObject(pageContextFromServer));
    assert(hasProp(pageContextFromServer, '_pageId', 'string'));
    removeBuiltInOverrides(pageContextFromServer);
    return pageContextFromServer;
}
