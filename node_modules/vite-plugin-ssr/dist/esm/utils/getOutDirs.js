import { viteIsSSR } from './viteIsSSR';
import { assert } from './assert';
import { pathJoin } from './path-shim';
import { assertPosixPath } from './filesystemPathHandling';
export { getOutDirs };
export { getOutDirs_prerender };
export { determineOutDir };
function getOutDirs(config) {
    const outDir = config.build.outDir;
    assertPosixPath(outDir);
    assertIsNotOutDirRoot(outDir);
    assertConfig(config);
    assert('/client'.length === '/server'.length);
    let outDirRoot = outDir.slice(0, -1 * '/client'.length);
    return getAllOutDirs(outDirRoot, config.root);
}
function getOutDirs_prerender(config) {
    const outDirRoot = config.build.outDir;
    assertPosixPath(outDirRoot);
    assertIsOutDirRoot(outDirRoot);
    return getAllOutDirs(outDirRoot, config.root);
}
/** Appends `client/` or `server/` to `config.build.outDir` */
function determineOutDir(config) {
    var _a;
    let outDirRoot = ((_a = config.build) === null || _a === void 0 ? void 0 : _a.outDir) || 'dist';
    assertPosixPath(outDirRoot);
    // If using Telefunc + vite-plugin-ssr then `config.build.outDir` may already be set
    if (!isOutDirRoot(outDirRoot)) {
        assertConfig(config);
        return outDirRoot;
    }
    const { outDirClient, outDirServer } = declineOutDirs(outDirRoot);
    if (viteIsSSR(config)) {
        return outDirServer;
    }
    else {
        return outDirClient;
    }
}
function getAllOutDirs(outDirRoot, root) {
    if (!outDirIsAbsolutePath(outDirRoot)) {
        assertPosixPath(outDirRoot);
        assertPosixPath(root);
        outDirRoot = pathJoin(root, outDirRoot);
    }
    let { outDirClient, outDirServer } = declineOutDirs(outDirRoot);
    outDirRoot = outDirRoot + '/';
    outDirClient = outDirClient + '/';
    outDirServer = outDirServer + '/';
    assertNormalization(outDirRoot);
    assertNormalization(outDirClient);
    assertNormalization(outDirServer);
    return { outDirRoot, outDirClient, outDirServer };
}
function assertNormalization(outDirAny) {
    assertPosixPath(outDirAny);
    assert(outDirIsAbsolutePath(outDirAny));
    assert(outDirAny.endsWith('/'));
    assert(!outDirAny.endsWith('//'));
}
function declineOutDirs(outDirRoot) {
    assertIsOutDirRoot(outDirRoot);
    assertPosixPath(outDirRoot);
    const outDirClient = pathJoin(outDirRoot, 'client');
    const outDirServer = pathJoin(outDirRoot, 'server');
    assertIsNotOutDirRoot(outDirClient);
    assertIsNotOutDirRoot(outDirServer);
    return { outDirClient, outDirServer };
}
function assertIsOutDirRoot(outDir) {
    assert(isOutDirRoot(outDir));
}
function isOutDirRoot(outDir) {
    const p = outDir.split('/').filter(Boolean);
    const lastDir = p[p.length - 1];
    return lastDir !== 'client' && lastDir !== 'server';
}
function assertIsNotOutDirRoot(outDir) {
    assert(outDir.endsWith('/client') || outDir.endsWith('/server'));
}
function assertConfig(config) {
    var _a;
    const outDir = (_a = config.build) === null || _a === void 0 ? void 0 : _a.outDir;
    assert(outDir);
    assertIsNotOutDirRoot(outDir);
    if (viteIsSSR(config)) {
        assert(outDir.endsWith('/server'));
    }
    else {
        assert(outDir.endsWith('/client'));
    }
}
function outDirIsAbsolutePath(outDir) {
    // There doesn't seem to be a better alternative to determine whether `outDir` is an aboslute path
    //  - Very unlikely that `outDir`'s first dir macthes the filesystem's first dir
    return getFirstDir(outDir) === getFirstDir(process.cwd());
}
function getFirstDir(p) {
    const firstDir = p.split(/\/|\\/).filter(Boolean)[0];
    return firstDir;
}
