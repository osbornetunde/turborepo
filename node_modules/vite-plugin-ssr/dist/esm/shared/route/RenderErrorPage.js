export { isRenderErrorPageException };
export { RenderErrorPage };
export { assertRenderErrorPageExceptionUsage };
import { assertPageContextProvidedByUser } from '../assertPageContextProvidedByUser';
import { assertUsage, objectAssign } from './utils';
const stamp = '__isRenderErrorPageException';
function isRenderErrorPageException(thing) {
    assertRenderErrorPageExceptionUsage(thing);
    return typeof thing === 'object' && thing !== null && stamp in thing;
}
function RenderErrorPage({ pageContext } = {}) {
    {
        // @ts-ignore
        const that = this;
        assertUsage(!(typeof that === 'object' && (that === null || that === void 0 ? void 0 : that.constructor) === RenderErrorPage), "Don't use the `new` operator: use `throw RenderErrorPage()` instead of `throw new RenderErrorPage()`.");
    }
    assertPageContextProvidedByUser(pageContext, {
        errorMessagePrefix: 'The `pageContext` object provided by `throw RenderErrorPage({ pageContext })`',
        isRenderErrorPage: true
    });
    const err = new Error('RenderErrorPage');
    objectAssign(err, { pageContext, [stamp]: true });
    return err;
}
function assertRenderErrorPageExceptionUsage(err) {
    assertUsage(err !== RenderErrorPage, 'Missing parentheses `()` in `throw RenderErrorPage`: it should be `throw RenderErrorPage()`.');
}
